declare function _exports(codecs: import('ipfs-core-utils/src/multicodecs'), config: import('../types').Options): {
    data: (cid: any, options?: (import("ipfs-core-types").AbortOptions & import("ipfs-core-types/src/utils").PreloadOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<Uint8Array>;
    get: (cid: any, options?: (import("ipfs-core-types").AbortOptions & import("ipfs-core-types/src/utils").PreloadOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("@ipld/dag-pb/src/interface").PBNode>;
    links: (cid: any, options?: (import("ipfs-core-types").AbortOptions & import("ipfs-core-types/src/utils").PreloadOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("@ipld/dag-pb/src/interface").PBLink[]>;
    new: (options?: (import("ipfs-core-types/src/object").NewObjectOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<any>;
    patch: {
        addLink: (cid: any, dLink: import("@ipld/dag-pb/src/interface").PBLink, options?: (import("ipfs-core-types").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<any>;
        appendData: (cid: any, data: Uint8Array, options?: (import("ipfs-core-types").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<any>;
        rmLink: (cid: any, dLink: string | import("@ipld/dag-pb/src/interface").PBLink, options?: (import("ipfs-core-types").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<any>;
        setData: (cid: any, data: Uint8Array, options?: (import("ipfs-core-types").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<any>;
    };
    put: (obj: import("@ipld/dag-pb/src/interface").PBNode, options?: (import("ipfs-core-types/src/object").PutOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<any>;
    stat: (cid: any, options?: (import("ipfs-core-types").AbortOptions & import("ipfs-core-types/src/utils").PreloadOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("ipfs-core-types/src/object").StatResult>;
};
export = _exports;
//# sourceMappingURL=index.d.ts.map